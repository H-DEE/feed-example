{"version":3,"sources":["F:/Projects/example/src/assets/styles/F:/Projects/example/src/assets/styles/F:/Projects/example/src/assets/styles/global.scss","F:/Projects/example/src/assets/styles/F:/Projects/example/src/assets/styles/F:/Projects/example/src/assets/styles/_colors.scss","F:/Projects/example/src/assets/styles/F:/Projects/example/src/assets/styles/F:/Projects/example/node_modules/media-blender/media.scss","F:/Projects/example/src/components/Search/F:/Projects/example/src/components/Search/F:/Projects/example/src/components/Search/Search.scss","F:/Projects/example/src/components/Search/F:/Projects/example/src/components/Search/F:/Projects/example/node_modules/media-blender/media.scss","F:/Projects/example/src/components/Search/F:/Projects/example/src/components/Search/F:/Projects/example/src/assets/styles/_colors.scss","F:/Projects/example/src/components/Sort/F:/Projects/example/src/components/Sort/F:/Projects/example/src/components/Sort/Sort.scss","F:/Projects/example/src/components/Sort/F:/Projects/example/src/components/Sort/F:/Projects/example/node_modules/media-blender/media.scss","F:/Projects/example/src/components/Sort/F:/Projects/example/src/components/Sort/F:/Projects/example/src/assets/styles/_colors.scss","F:/Projects/example/src/components/FeedCard/F:/Projects/example/src/components/FeedCard/F:/Projects/example/src/components/FeedCard/FeedCard.scss","F:/Projects/example/src/components/FeedCard/F:/Projects/example/src/components/FeedCard/F:/Projects/example/node_modules/media-blender/media.scss","F:/Projects/example/src/components/FeedCard/F:/Projects/example/src/components/FeedCard/F:/Projects/example/src/assets/styles/_colors.scss","F:/Projects/example/src/components/FlexTable/F:/Projects/example/src/components/FlexTable/F:/Projects/example/src/components/FlexTable/FlexTable.scss","F:/Projects/example/src/components/FlexTable/F:/Projects/example/src/components/FlexTable/F:/Projects/example/node_modules/media-blender/media.scss","F:/Projects/example/src/containers/Feed/F:/Projects/example/src/containers/Feed/F:/Projects/example/src/containers/Feed/Feed.scss","F:/Projects/example/src/containers/Feed/F:/Projects/example/src/containers/Feed/F:/Projects/example/node_modules/media-blender/media.scss","F:/Projects/example/src/F:/Projects/example/src/F:/Projects/example/src/App.scss","F:/Projects/example/src/F:/Projects/example/src/F:/Projects/example/src/assets/styles/_variables.scss","F:/Projects/example/src/F:/Projects/example/src/F:/Projects/example/src/assets/styles/_colors.scss","F:/Projects/example/src/F:/Projects/example/src/F:/Projects/example/node_modules/media-blender/media.scss"],"names":[],"mappings":"AAGA,EACE,qBAAsB,CACvB,AAED,KACE,SAAS,AACT,UAAU,AACV,oIAEY,AACZ,mCAAmC,AACnC,kCAAkC,AAClC,eCTgB,CDUjB,AAED,KACE,uEACW,CACZ,AAED,YACE,SAAS,AACT,eAAe,AACf,UC1BqB,CD2BtB,AAED,GACE,cAAe,CAChB,AAED,GACE,gBAAiB,CAClB,AAED,GACE,gBAAiB,CAClB,AEsSC,yBFlSA,KACE,cAAe,CAChB,CAAA,AG3CH,gBACE,SAAU,CAiCX,ACySC,yBD3UF,gBAII,aAAa,AACb,yBAAyB,AACzB,SAAU,CA4Bb,CAAA,AAlCD,4BAUI,kBAAkB,AAClB,gBAAgB,AAChB,SAAU,CAqBX,AAjCH,kCAeM,WAAW,AACX,kBAAkB,AAClB,MAAM,AACN,QAAQ,AACR,YAAY,AACZ,aAAa,AACb,kFAAgE,AAChE,sBAAuB,CACxB,AAvBL,wCA0BM,WAAW,AACX,gCAAmC,AACnC,sBErBiB,AFsBjB,kBAAkB,AAClB,WE/BmB,AFgCnB,4BEvBoB,CFwBrB,AGhCL,cACE,aAAa,AACb,mBAAmB,AACnB,UAAU,AACV,wBAAyB,CAoB1B,ACmTC,yBD3UF,cAOI,UAAW,CAiBd,CAAA,AAxBD,qBAWI,oBAAqB,AACrB,WAAW,AACX,gBAAiB,CAClB,AAdH,iCAiBI,cAAe,AACf,sBEXmB,AFYnB,kBAAkB,AAClB,WAAW,AACX,6BEbsB,AFctB,UAAW,CACZ,AGvBH,cACE,aAAa,AACb,eAAgB,AAChB,YAAa,CA+Bd,ACySC,yBD3UF,cAMI,gBAAiB,AACjB,UAAW,CA2Bd,CAAA,ACySC,+CD3UF,cAWI,SAAU,CAuBb,CAAA,AAlCD,oBAeI,mBELiB,AFMjB,6BEJqB,AFKrB,aAAa,AACb,yBEPqB,AFQrB,iBAAkB,CAcnB,AAjCH,uBAsBM,kBAAmB,CACpB,AAvBL,8BA0BM,UAAW,CACZ,AA3BL,0BA8BM,WE9BkB,AF+BlB,eAAiB,CAClB,AGhCL,oBACE,sBAAsB,AACtB,mBAAoB,CAiGrB,ACwOC,yBD3UF,oBAKI,QAAS,CA8FZ,CAAA,ACwOC,yBD3UF,oBASI,WAAY,CA0Ff,CAAA,AAnGD,gCAaI,aAAa,AACb,kBAAmB,CAkBpB,AC2SD,yBD3UF,gCAiBM,YAAa,CAehB,CAAA,AAhCH,yCAqBM,SAAO,AACP,cAAe,AACf,4BAA4B,AAC5B,0BAA0B,AAC1B,kBAAkB,AAClB,eAAgB,CAKjB,AA/BL,oDA6BQ,cAAe,CAChB,AA9BP,2CAoCM,aAAa,AACb,0BAA0B,AAC1B,iBAAkB,CA2DnB,AC0OH,yBD3UF,2CAyCQ,eAAe,AACf,mBAAmB,AACnB,sBAAsB,AACtB,sBAAsB,AACtB,kBAAmB,CAoDtB,AAjGL,uDAgDU,YAAa,CACd,CAAA,AAjDT,oDAqDQ,SAAO,AACP,cAAe,AACf,2BAA4B,CAyC7B,AC2OL,+CD3UF,oDA0DU,SAAU,CAsCb,CAAA,AC2OL,yBD3UF,oDA8DU,SAAS,AACT,8BAA8B,AAC9B,kBAAoB,CAgCvB,AAhGP,+DAmEY,eAAgB,CACjB,CAAA,AApEX,2DAwEU,SAAU,CAmBX,ACgPP,+CD3UF,2DA2EY,kBAAkB,AAClB,MAAM,AACN,QAAQ,AACR,UAAU,AACV,YAAY,AACZ,eAAgB,CAWnB,CAAA,ACgPP,yBD3UF,2DAoFY,UAAW,CAOd,CAAA,AA3FT,+DAwFY,WAAW,AACX,eAAgB,CACjB,AA1FX,+DA8FU,cAAe,CAChB,AE/FT,8BAEI,aAAa,AACb,mBAAmB,AACnB,eAAe,AACf,uBAAyB,CAa1B,ACyTD,yBD3UF,8BAQM,oBAAsB,CAUzB,CAAA,AAlBH,iCAYM,UAAW,CAKZ,AC0TH,yBD3UF,iCAeQ,SAAU,CAEb,CAAA,AAjBL,mBAqBI,gBAAgB,AAChB,iBAAkB,CAMnB,AC+SD,yBD3UF,mBAyBM,gBAAgB,AAChB,cAAe,CAElB,CAAA,AA5BH,iCA+BI,aAAa,AACb,eAAe,AACf,cAAe,CAChB,AElCH,eACE,iBCM0B,ADL1B,gBEGqB,AFFrB,iBAAiB,AACjB,mBAAoB,CAKrB,AGkUC,0BH3UF,eAOI,aAAc,CAEjB,CAAA","file":"main.9d630208.chunk.css","sourcesContent":["@import 'core.scss';\n\n/* Using border-box across */\n* {\n  box-sizing: border-box;\n}\n\nbody {\n  margin: 0;\n  padding: 0;\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\",\n    \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\",\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  background: $app-bg-body;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, \"Courier New\",\n    monospace;\n}\n\nh1, h2, h3, h4 {\n  margin: 0;\n  padding: 1rem 0;\n  color: $app-text-primary;\n}\n\nh1 {\n  font-size: 2rem;\n}\n\nh2 {\n  font-size: 1.5rem;\n}\n\nh3 {\n  font-size: 1.3rem;\n}\n\n/* Default font-size to scale other elements from for tablet/mobile devices */\n@include media(tablet down) {\n  html {\n    font-size: 14px;\n  }\n}\n","$app-text-primary: #222;\n$app-text-secondary: #444;\n$app-text-tertiary: #666;\n$app-text-white: #fff;\n$app-text-black: #000;\n\n$app-bg-body: #eee;\n$app-bg-container: #fff;\n\n$app-input-border: #ddd;\n$app-input-shadow: #f3f3f3;\n\n$app-card-bg: #fbfbfb;\n$app-card-border: #f3f3f3;\n$app-card-shadow: #f3f3f3;\n\n$app-table-border: #eee;\n$app-table-head-bg: #fbfbfb;\n","$media-breakpoints: (\n  small: 0 543,\n  mobile: 544 767,\n  tablet: 768 991,\n  desktop: 992 1199,\n  large: 1200\n) !default;\n\n@function __media-blender-validate-breakpoints($queries) {\n  $breakpoints: map-keys($media-breakpoints);\n  $keywords: up down retina;\n  $valid-words: join($breakpoints, $keywords);\n\n  @each $query in $queries {\n    @if (null == index($valid-words, $query)) {\n      @error 'Invalid query \"#{$query}\". Please check your breakpoints definition. Allowed values: #{$valid-words}';\n    }\n  }\n\n  @return true;\n}\n\n@function __media-blender-swap-elements($list, $i, $j) {\n  $tmp: nth($list, $i);\n  $list: set-nth($list, $i, nth($list, $j));\n  $list: set-nth($list, $j, $tmp);\n\n  @return $list;\n}\n\n// Bubble sort, efficiency questionable. Sorts queries by their\n// breakpoint values, ascendingly\n@function __media-blender-sort-queries($queries) {\n  $len: length($queries);\n\n  @for $i from 1 through $len {\n    @if $i < $len { // Avoid out-of-bounds errors\n      @for $j from $i + 1 through $len {\n        $left: map-get($media-breakpoints, nth($queries, $i));\n        $right: map-get($media-breakpoints, nth($queries, $j));\n\n        // If the right breakpoint's min is before the left's max\n        @if length($left) < 2 or nth($right, 1) < nth($left, 2) {\n          $queries: __media-blender-swap-elements($queries, $i, $j);\n        }\n      }\n    }\n  }\n\n  @return $queries;\n}\n\n// Assumes sorted\n@function __media-blender-remove-duplicate-queries($queries) {\n  $uniques: ();\n  $last: null;\n\n  @each $query in $queries {\n    @if $last == null or $query != $last {\n      $uniques: append($uniques, $query);\n    }\n\n    $last: $query;\n  }\n\n  @return $uniques;\n}\n\n@function __media-blender-expand-in-direction($breakpoint, $direction) {\n  $list: ();\n\n  $breakpoints-list: map-get($media-breakpoints, $breakpoint);\n  $min-point: nth($breakpoints-list, 1);\n  $max-point: if(length($breakpoints-list) >= 2, nth($breakpoints-list, 2), null);\n\n  @each $key, $value in $media-breakpoints {\n    @if $direction == up {\n      @if $max-point and $key != $breakpoint and nth($value, 1) >= $max-point {\n        $list: append($list, $key);\n      }\n    }\n\n    @else if $direction == down {\n      @if $min-point and $key != $breakpoint and length($value) >= 2 and nth($value, 2) <= $min-point {\n        $list: append($list, $key);\n      }\n    }\n\n    @else {\n      @error 'Invalid expansion direction #{$direction}';\n    }\n  }\n\n  @return $list;\n}\n\n@function __media-blender-expand($query) {\n  $latest: null;\n  $expanded-query: ();\n\n  @each $breakpoint in $query {\n    @if $breakpoint == up or $breakpoint == down {\n      @if $latest {\n        // Merged with existing list, allowing for queries\n        // such as \"small large up\"\n        $expanded-query: join($expanded-query, __media-blender-expand-in-direction($latest, $breakpoint));\n        $latest: null;\n      }\n\n      @else {\n        @error 'Cannot use up and down without a preceding breakpoint';\n      }\n    }\n\n    @else {\n      $expanded-query: append($expanded-query, $breakpoint);\n      $latest: $breakpoint;\n    }\n  }\n\n  @return $expanded-query;\n}\n\n@function __media-blender-remove-element($list, $value) {\n  $result: ();\n\n  @for $i from 1 through length($list) {\n    @if nth($list, $i) != $value {\n      $result: append($result, nth($list, $i));\n    }\n  }\n\n  @return $result;\n}\n\n@function __media-blender-remove-duplicates($list) {\n  $result: ();\n  $i: 0;\n\n  //remove all duplicates (both of them)\n  @each $item-first in $list {\n    $i: $i + 1;\n    $should-add: true;\n    $index: $i;\n    $j: 0;\n\n    @each $item-second in $list {\n      $j: $j + 1;\n\n      @if $item-first == $item-second and not ($j == $index) {\n        $should-add: false;\n      }\n    }\n\n    @if $should-add == true {\n      $result: append($result, $item-first);\n    }\n  }\n\n  @return $result;\n}\n\n@function __media-blender-join-queries($queries) {\n  //start list with 0, so it can be removed with\n  //duplicates/or used to determine min or max start\n  $groups: ();\n  $list: (0);\n  $last-max: 0;\n\n  //join list of breakpoints based on queries\n  @each $q in $queries {\n    @each $key, $val in $media-breakpoints {\n      @if $q == $key {\n        @if nth($val, 1) != $last-max and $last-max != 0 {\n          $groups: append($groups, __media-blender-remove-duplicates($list));\n          $list: (0);\n          $last-max: 0;\n        }\n\n        @if length($val) == 1 {\n          $list: join($list, $val);\n        }\n\n        @else {\n          $last-max: nth($val, 2) + 1;\n          $list: join($list, (nth($val, 1), $last-max));\n        }\n      }\n    }\n  }\n\n  @if length($list) > 1 {\n    $groups: append($groups, __media-blender-remove-duplicates($list));\n  }\n\n  @return $groups;\n}\n\n@function __media-blender-join-list($list, $separator) {\n  $result: '';\n\n  // Join with separator\n  @each $str in $list {\n    $result: $result + $str + $separator;\n  }\n\n  // Remove final instance of separator\n  $result: str-slice($result, 0, str-length($result) - str-length($separator));\n\n  //unqoute for usage withing query block - check out sass strings as for why\n  $result: unquote($result);\n\n  @return $result;\n}\n\n@function __media-blender-get-query($list, $flag: false) {\n  //list of non-adjacent query groups\n  $lists: ();\n\n  //list of strings to concatenate\n  $strings: ();\n\n  $last-max: 0;\n\n  //for each item in list, go back and forth between min width and max width\n  @each $item in $list {\n    @if $flag == true {\n      $strings: append($strings, '(min-width: #{$item}px)');\n      $flag: false;\n    }\n\n    @else {\n      $val: $item - 1;\n      $strings: append($strings, '(max-width: #{$val}px)');\n      $flag: true;\n    }\n  }\n\n  @return __media-blender-join-list($strings, ' and ');\n}\n\n@function __media-blender-add-retina($queries) {\n  @if (length($queries) == 0) {\n    @return (\n      unquote('(-webkit-min-device-pixel-ratio: 2)'),\n      unquote('(min-resolution: 192dpi)')\n    );\n  }\n\n  $retina-queries: ();\n\n  @each $query in $queries {\n    $webkit-query: unquote($query + ' and (-webkit-min-device-pixel-ratio: 2)');\n    $dpi-query: unquote($query + ' and (min-resolution: 192dpi)');\n\n    $retina-queries: append($retina-queries, $webkit-query);\n    $retina-queries: append($retina-queries, $dpi-query);\n  }\n\n  @return $retina-queries;\n}\n\n@function __media-blender-remove-nth($list, $index) {\n  $result: ();\n\n  @for $i from 1 through length($list) {\n    @if $i != $index {\n      $result: append($result, nth($list, $i));\n    }\n  }\n\n  @return $result;\n}\n\n@mixin media($queries, $orientation: null) {\n  $is-error-free: __media-blender-validate-breakpoints($queries);\n  $retina-index: index($queries, retina);\n\n  @if $retina-index {\n    $queries: __media-blender-remove-nth($queries, $retina-index);\n  }\n\n  // resolve up/down syntax for mobile-first and desktop-first\n  $queries: __media-blender-expand($queries);\n\n  //sort the queries for correct or-list (comma-separated) generation,\n  // and remove duplicates\n  $queries: __media-blender-sort-queries($queries);\n  $queries: __media-blender-remove-duplicate-queries($queries);\n  $query-lists: __media-blender-join-queries($queries);\n\n  $breakpoint-lists: ();\n\n  @each $query in $query-lists {\n    $skip-first-max: false;\n\n    //if the 0 survived, it means we must start with max to get correct results\n    //also remove the 0, makes no sense to use it in media queries\n    @if index($query, 0) {\n      $skip-first-max: true;\n      $query: __media-blender-remove-element($query, 0);\n    }\n\n    //get the query string from breakpoint-list\n    $query: __media-blender-get-query($query, $skip-first-max);\n\n    //if the query is empty it means all items in list\n    //were duplicates, meaning all were selected\n    @if $query == '' {\n      @if $orientation != null {\n        $query: '(orientation: #{$orientation})';\n      }\n\n      @else {\n        $query: all;\n      }\n    }\n\n    @else if $orientation != null {\n      $query: '#{$query} and (orientation: #{$orientation})';\n    }\n\n    $breakpoint-lists: append($breakpoint-lists, $query);\n  }\n\n  //If retina was found in the query list\n  @if $retina-index {\n    $breakpoint-lists: __media-blender-add-retina($breakpoint-lists);\n  }\n\n  $breakpoint-lists: __media-blender-join-list($breakpoint-lists, ', ');\n\n  //actual media query - @content is were user content goes\n  @media #{$breakpoint-lists} {\n    @content;\n  }\n}\n","@import '../../assets/styles/core.scss';\r\n\r\n.search-wrapper {\r\n  width: 50%;\r\n\r\n  @include media(mobile down) {\r\n    display: flex;\r\n    justify-content: flex-end;\r\n    width: 75%;\r\n  }\r\n  \r\n  .search-box {\r\n    position: relative;\r\n    min-width: 120px;\r\n    width: 75%;\r\n\r\n    &::after {\r\n      content: '';\r\n      position: absolute;\r\n      top: 0;\r\n      right: 0;\r\n      height: 100%;\r\n      width: 1.8rem;\r\n      background: url('../../assets/search_icon.svg') no-repeat center;\r\n      background-size: 1.5rem;\r\n    }\r\n\r\n    .search-bar {\r\n      width: 100%;\r\n      padding: 0.5rem 2rem 0.5rem 0.75rem;\r\n      border: 1px solid $app-input-border;\r\n      border-radius: 4px;\r\n      color: $app-text-secondary;\r\n      box-shadow: 0 2px 4px $app-input-shadow;\r\n    }\r\n  }\r\n}\r\n","$media-breakpoints: (\n  small: 0 543,\n  mobile: 544 767,\n  tablet: 768 991,\n  desktop: 992 1199,\n  large: 1200\n) !default;\n\n@function __media-blender-validate-breakpoints($queries) {\n  $breakpoints: map-keys($media-breakpoints);\n  $keywords: up down retina;\n  $valid-words: join($breakpoints, $keywords);\n\n  @each $query in $queries {\n    @if (null == index($valid-words, $query)) {\n      @error 'Invalid query \"#{$query}\". Please check your breakpoints definition. Allowed values: #{$valid-words}';\n    }\n  }\n\n  @return true;\n}\n\n@function __media-blender-swap-elements($list, $i, $j) {\n  $tmp: nth($list, $i);\n  $list: set-nth($list, $i, nth($list, $j));\n  $list: set-nth($list, $j, $tmp);\n\n  @return $list;\n}\n\n// Bubble sort, efficiency questionable. Sorts queries by their\n// breakpoint values, ascendingly\n@function __media-blender-sort-queries($queries) {\n  $len: length($queries);\n\n  @for $i from 1 through $len {\n    @if $i < $len { // Avoid out-of-bounds errors\n      @for $j from $i + 1 through $len {\n        $left: map-get($media-breakpoints, nth($queries, $i));\n        $right: map-get($media-breakpoints, nth($queries, $j));\n\n        // If the right breakpoint's min is before the left's max\n        @if length($left) < 2 or nth($right, 1) < nth($left, 2) {\n          $queries: __media-blender-swap-elements($queries, $i, $j);\n        }\n      }\n    }\n  }\n\n  @return $queries;\n}\n\n// Assumes sorted\n@function __media-blender-remove-duplicate-queries($queries) {\n  $uniques: ();\n  $last: null;\n\n  @each $query in $queries {\n    @if $last == null or $query != $last {\n      $uniques: append($uniques, $query);\n    }\n\n    $last: $query;\n  }\n\n  @return $uniques;\n}\n\n@function __media-blender-expand-in-direction($breakpoint, $direction) {\n  $list: ();\n\n  $breakpoints-list: map-get($media-breakpoints, $breakpoint);\n  $min-point: nth($breakpoints-list, 1);\n  $max-point: if(length($breakpoints-list) >= 2, nth($breakpoints-list, 2), null);\n\n  @each $key, $value in $media-breakpoints {\n    @if $direction == up {\n      @if $max-point and $key != $breakpoint and nth($value, 1) >= $max-point {\n        $list: append($list, $key);\n      }\n    }\n\n    @else if $direction == down {\n      @if $min-point and $key != $breakpoint and length($value) >= 2 and nth($value, 2) <= $min-point {\n        $list: append($list, $key);\n      }\n    }\n\n    @else {\n      @error 'Invalid expansion direction #{$direction}';\n    }\n  }\n\n  @return $list;\n}\n\n@function __media-blender-expand($query) {\n  $latest: null;\n  $expanded-query: ();\n\n  @each $breakpoint in $query {\n    @if $breakpoint == up or $breakpoint == down {\n      @if $latest {\n        // Merged with existing list, allowing for queries\n        // such as \"small large up\"\n        $expanded-query: join($expanded-query, __media-blender-expand-in-direction($latest, $breakpoint));\n        $latest: null;\n      }\n\n      @else {\n        @error 'Cannot use up and down without a preceding breakpoint';\n      }\n    }\n\n    @else {\n      $expanded-query: append($expanded-query, $breakpoint);\n      $latest: $breakpoint;\n    }\n  }\n\n  @return $expanded-query;\n}\n\n@function __media-blender-remove-element($list, $value) {\n  $result: ();\n\n  @for $i from 1 through length($list) {\n    @if nth($list, $i) != $value {\n      $result: append($result, nth($list, $i));\n    }\n  }\n\n  @return $result;\n}\n\n@function __media-blender-remove-duplicates($list) {\n  $result: ();\n  $i: 0;\n\n  //remove all duplicates (both of them)\n  @each $item-first in $list {\n    $i: $i + 1;\n    $should-add: true;\n    $index: $i;\n    $j: 0;\n\n    @each $item-second in $list {\n      $j: $j + 1;\n\n      @if $item-first == $item-second and not ($j == $index) {\n        $should-add: false;\n      }\n    }\n\n    @if $should-add == true {\n      $result: append($result, $item-first);\n    }\n  }\n\n  @return $result;\n}\n\n@function __media-blender-join-queries($queries) {\n  //start list with 0, so it can be removed with\n  //duplicates/or used to determine min or max start\n  $groups: ();\n  $list: (0);\n  $last-max: 0;\n\n  //join list of breakpoints based on queries\n  @each $q in $queries {\n    @each $key, $val in $media-breakpoints {\n      @if $q == $key {\n        @if nth($val, 1) != $last-max and $last-max != 0 {\n          $groups: append($groups, __media-blender-remove-duplicates($list));\n          $list: (0);\n          $last-max: 0;\n        }\n\n        @if length($val) == 1 {\n          $list: join($list, $val);\n        }\n\n        @else {\n          $last-max: nth($val, 2) + 1;\n          $list: join($list, (nth($val, 1), $last-max));\n        }\n      }\n    }\n  }\n\n  @if length($list) > 1 {\n    $groups: append($groups, __media-blender-remove-duplicates($list));\n  }\n\n  @return $groups;\n}\n\n@function __media-blender-join-list($list, $separator) {\n  $result: '';\n\n  // Join with separator\n  @each $str in $list {\n    $result: $result + $str + $separator;\n  }\n\n  // Remove final instance of separator\n  $result: str-slice($result, 0, str-length($result) - str-length($separator));\n\n  //unqoute for usage withing query block - check out sass strings as for why\n  $result: unquote($result);\n\n  @return $result;\n}\n\n@function __media-blender-get-query($list, $flag: false) {\n  //list of non-adjacent query groups\n  $lists: ();\n\n  //list of strings to concatenate\n  $strings: ();\n\n  $last-max: 0;\n\n  //for each item in list, go back and forth between min width and max width\n  @each $item in $list {\n    @if $flag == true {\n      $strings: append($strings, '(min-width: #{$item}px)');\n      $flag: false;\n    }\n\n    @else {\n      $val: $item - 1;\n      $strings: append($strings, '(max-width: #{$val}px)');\n      $flag: true;\n    }\n  }\n\n  @return __media-blender-join-list($strings, ' and ');\n}\n\n@function __media-blender-add-retina($queries) {\n  @if (length($queries) == 0) {\n    @return (\n      unquote('(-webkit-min-device-pixel-ratio: 2)'),\n      unquote('(min-resolution: 192dpi)')\n    );\n  }\n\n  $retina-queries: ();\n\n  @each $query in $queries {\n    $webkit-query: unquote($query + ' and (-webkit-min-device-pixel-ratio: 2)');\n    $dpi-query: unquote($query + ' and (min-resolution: 192dpi)');\n\n    $retina-queries: append($retina-queries, $webkit-query);\n    $retina-queries: append($retina-queries, $dpi-query);\n  }\n\n  @return $retina-queries;\n}\n\n@function __media-blender-remove-nth($list, $index) {\n  $result: ();\n\n  @for $i from 1 through length($list) {\n    @if $i != $index {\n      $result: append($result, nth($list, $i));\n    }\n  }\n\n  @return $result;\n}\n\n@mixin media($queries, $orientation: null) {\n  $is-error-free: __media-blender-validate-breakpoints($queries);\n  $retina-index: index($queries, retina);\n\n  @if $retina-index {\n    $queries: __media-blender-remove-nth($queries, $retina-index);\n  }\n\n  // resolve up/down syntax for mobile-first and desktop-first\n  $queries: __media-blender-expand($queries);\n\n  //sort the queries for correct or-list (comma-separated) generation,\n  // and remove duplicates\n  $queries: __media-blender-sort-queries($queries);\n  $queries: __media-blender-remove-duplicate-queries($queries);\n  $query-lists: __media-blender-join-queries($queries);\n\n  $breakpoint-lists: ();\n\n  @each $query in $query-lists {\n    $skip-first-max: false;\n\n    //if the 0 survived, it means we must start with max to get correct results\n    //also remove the 0, makes no sense to use it in media queries\n    @if index($query, 0) {\n      $skip-first-max: true;\n      $query: __media-blender-remove-element($query, 0);\n    }\n\n    //get the query string from breakpoint-list\n    $query: __media-blender-get-query($query, $skip-first-max);\n\n    //if the query is empty it means all items in list\n    //were duplicates, meaning all were selected\n    @if $query == '' {\n      @if $orientation != null {\n        $query: '(orientation: #{$orientation})';\n      }\n\n      @else {\n        $query: all;\n      }\n    }\n\n    @else if $orientation != null {\n      $query: '#{$query} and (orientation: #{$orientation})';\n    }\n\n    $breakpoint-lists: append($breakpoint-lists, $query);\n  }\n\n  //If retina was found in the query list\n  @if $retina-index {\n    $breakpoint-lists: __media-blender-add-retina($breakpoint-lists);\n  }\n\n  $breakpoint-lists: __media-blender-join-list($breakpoint-lists, ', ');\n\n  //actual media query - @content is were user content goes\n  @media #{$breakpoint-lists} {\n    @content;\n  }\n}\n","$app-text-primary: #222;\n$app-text-secondary: #444;\n$app-text-tertiary: #666;\n$app-text-white: #fff;\n$app-text-black: #000;\n\n$app-bg-body: #eee;\n$app-bg-container: #fff;\n\n$app-input-border: #ddd;\n$app-input-shadow: #f3f3f3;\n\n$app-card-bg: #fbfbfb;\n$app-card-border: #f3f3f3;\n$app-card-shadow: #f3f3f3;\n\n$app-table-border: #eee;\n$app-table-head-bg: #fbfbfb;\n","@import '../../assets/styles/core.scss';\r\n\r\n.sort-wrapper {\r\n  display: flex;\r\n  align-items: center;\r\n  width: 50%;\r\n  justify-content: flex-end;\r\n\r\n  @include media(mobile down) {\r\n    width: 100%;\r\n  }\r\n\r\n  .label {\r\n    padding-right: 0.5rem;\r\n    width: 90px;\r\n    text-align: right;\r\n  }\r\n\r\n  .select-box select {\r\n    padding: 0.5rem;\r\n    border: 1px solid $app-input-border;\r\n    border-radius: 4px;\r\n    color: #444;\r\n    box-shadow: 0 2px 4px $app-input-shadow;\r\n    width: 100%;\r\n  }\r\n}\r\n","$media-breakpoints: (\n  small: 0 543,\n  mobile: 544 767,\n  tablet: 768 991,\n  desktop: 992 1199,\n  large: 1200\n) !default;\n\n@function __media-blender-validate-breakpoints($queries) {\n  $breakpoints: map-keys($media-breakpoints);\n  $keywords: up down retina;\n  $valid-words: join($breakpoints, $keywords);\n\n  @each $query in $queries {\n    @if (null == index($valid-words, $query)) {\n      @error 'Invalid query \"#{$query}\". Please check your breakpoints definition. Allowed values: #{$valid-words}';\n    }\n  }\n\n  @return true;\n}\n\n@function __media-blender-swap-elements($list, $i, $j) {\n  $tmp: nth($list, $i);\n  $list: set-nth($list, $i, nth($list, $j));\n  $list: set-nth($list, $j, $tmp);\n\n  @return $list;\n}\n\n// Bubble sort, efficiency questionable. Sorts queries by their\n// breakpoint values, ascendingly\n@function __media-blender-sort-queries($queries) {\n  $len: length($queries);\n\n  @for $i from 1 through $len {\n    @if $i < $len { // Avoid out-of-bounds errors\n      @for $j from $i + 1 through $len {\n        $left: map-get($media-breakpoints, nth($queries, $i));\n        $right: map-get($media-breakpoints, nth($queries, $j));\n\n        // If the right breakpoint's min is before the left's max\n        @if length($left) < 2 or nth($right, 1) < nth($left, 2) {\n          $queries: __media-blender-swap-elements($queries, $i, $j);\n        }\n      }\n    }\n  }\n\n  @return $queries;\n}\n\n// Assumes sorted\n@function __media-blender-remove-duplicate-queries($queries) {\n  $uniques: ();\n  $last: null;\n\n  @each $query in $queries {\n    @if $last == null or $query != $last {\n      $uniques: append($uniques, $query);\n    }\n\n    $last: $query;\n  }\n\n  @return $uniques;\n}\n\n@function __media-blender-expand-in-direction($breakpoint, $direction) {\n  $list: ();\n\n  $breakpoints-list: map-get($media-breakpoints, $breakpoint);\n  $min-point: nth($breakpoints-list, 1);\n  $max-point: if(length($breakpoints-list) >= 2, nth($breakpoints-list, 2), null);\n\n  @each $key, $value in $media-breakpoints {\n    @if $direction == up {\n      @if $max-point and $key != $breakpoint and nth($value, 1) >= $max-point {\n        $list: append($list, $key);\n      }\n    }\n\n    @else if $direction == down {\n      @if $min-point and $key != $breakpoint and length($value) >= 2 and nth($value, 2) <= $min-point {\n        $list: append($list, $key);\n      }\n    }\n\n    @else {\n      @error 'Invalid expansion direction #{$direction}';\n    }\n  }\n\n  @return $list;\n}\n\n@function __media-blender-expand($query) {\n  $latest: null;\n  $expanded-query: ();\n\n  @each $breakpoint in $query {\n    @if $breakpoint == up or $breakpoint == down {\n      @if $latest {\n        // Merged with existing list, allowing for queries\n        // such as \"small large up\"\n        $expanded-query: join($expanded-query, __media-blender-expand-in-direction($latest, $breakpoint));\n        $latest: null;\n      }\n\n      @else {\n        @error 'Cannot use up and down without a preceding breakpoint';\n      }\n    }\n\n    @else {\n      $expanded-query: append($expanded-query, $breakpoint);\n      $latest: $breakpoint;\n    }\n  }\n\n  @return $expanded-query;\n}\n\n@function __media-blender-remove-element($list, $value) {\n  $result: ();\n\n  @for $i from 1 through length($list) {\n    @if nth($list, $i) != $value {\n      $result: append($result, nth($list, $i));\n    }\n  }\n\n  @return $result;\n}\n\n@function __media-blender-remove-duplicates($list) {\n  $result: ();\n  $i: 0;\n\n  //remove all duplicates (both of them)\n  @each $item-first in $list {\n    $i: $i + 1;\n    $should-add: true;\n    $index: $i;\n    $j: 0;\n\n    @each $item-second in $list {\n      $j: $j + 1;\n\n      @if $item-first == $item-second and not ($j == $index) {\n        $should-add: false;\n      }\n    }\n\n    @if $should-add == true {\n      $result: append($result, $item-first);\n    }\n  }\n\n  @return $result;\n}\n\n@function __media-blender-join-queries($queries) {\n  //start list with 0, so it can be removed with\n  //duplicates/or used to determine min or max start\n  $groups: ();\n  $list: (0);\n  $last-max: 0;\n\n  //join list of breakpoints based on queries\n  @each $q in $queries {\n    @each $key, $val in $media-breakpoints {\n      @if $q == $key {\n        @if nth($val, 1) != $last-max and $last-max != 0 {\n          $groups: append($groups, __media-blender-remove-duplicates($list));\n          $list: (0);\n          $last-max: 0;\n        }\n\n        @if length($val) == 1 {\n          $list: join($list, $val);\n        }\n\n        @else {\n          $last-max: nth($val, 2) + 1;\n          $list: join($list, (nth($val, 1), $last-max));\n        }\n      }\n    }\n  }\n\n  @if length($list) > 1 {\n    $groups: append($groups, __media-blender-remove-duplicates($list));\n  }\n\n  @return $groups;\n}\n\n@function __media-blender-join-list($list, $separator) {\n  $result: '';\n\n  // Join with separator\n  @each $str in $list {\n    $result: $result + $str + $separator;\n  }\n\n  // Remove final instance of separator\n  $result: str-slice($result, 0, str-length($result) - str-length($separator));\n\n  //unqoute for usage withing query block - check out sass strings as for why\n  $result: unquote($result);\n\n  @return $result;\n}\n\n@function __media-blender-get-query($list, $flag: false) {\n  //list of non-adjacent query groups\n  $lists: ();\n\n  //list of strings to concatenate\n  $strings: ();\n\n  $last-max: 0;\n\n  //for each item in list, go back and forth between min width and max width\n  @each $item in $list {\n    @if $flag == true {\n      $strings: append($strings, '(min-width: #{$item}px)');\n      $flag: false;\n    }\n\n    @else {\n      $val: $item - 1;\n      $strings: append($strings, '(max-width: #{$val}px)');\n      $flag: true;\n    }\n  }\n\n  @return __media-blender-join-list($strings, ' and ');\n}\n\n@function __media-blender-add-retina($queries) {\n  @if (length($queries) == 0) {\n    @return (\n      unquote('(-webkit-min-device-pixel-ratio: 2)'),\n      unquote('(min-resolution: 192dpi)')\n    );\n  }\n\n  $retina-queries: ();\n\n  @each $query in $queries {\n    $webkit-query: unquote($query + ' and (-webkit-min-device-pixel-ratio: 2)');\n    $dpi-query: unquote($query + ' and (min-resolution: 192dpi)');\n\n    $retina-queries: append($retina-queries, $webkit-query);\n    $retina-queries: append($retina-queries, $dpi-query);\n  }\n\n  @return $retina-queries;\n}\n\n@function __media-blender-remove-nth($list, $index) {\n  $result: ();\n\n  @for $i from 1 through length($list) {\n    @if $i != $index {\n      $result: append($result, nth($list, $i));\n    }\n  }\n\n  @return $result;\n}\n\n@mixin media($queries, $orientation: null) {\n  $is-error-free: __media-blender-validate-breakpoints($queries);\n  $retina-index: index($queries, retina);\n\n  @if $retina-index {\n    $queries: __media-blender-remove-nth($queries, $retina-index);\n  }\n\n  // resolve up/down syntax for mobile-first and desktop-first\n  $queries: __media-blender-expand($queries);\n\n  //sort the queries for correct or-list (comma-separated) generation,\n  // and remove duplicates\n  $queries: __media-blender-sort-queries($queries);\n  $queries: __media-blender-remove-duplicate-queries($queries);\n  $query-lists: __media-blender-join-queries($queries);\n\n  $breakpoint-lists: ();\n\n  @each $query in $query-lists {\n    $skip-first-max: false;\n\n    //if the 0 survived, it means we must start with max to get correct results\n    //also remove the 0, makes no sense to use it in media queries\n    @if index($query, 0) {\n      $skip-first-max: true;\n      $query: __media-blender-remove-element($query, 0);\n    }\n\n    //get the query string from breakpoint-list\n    $query: __media-blender-get-query($query, $skip-first-max);\n\n    //if the query is empty it means all items in list\n    //were duplicates, meaning all were selected\n    @if $query == '' {\n      @if $orientation != null {\n        $query: '(orientation: #{$orientation})';\n      }\n\n      @else {\n        $query: all;\n      }\n    }\n\n    @else if $orientation != null {\n      $query: '#{$query} and (orientation: #{$orientation})';\n    }\n\n    $breakpoint-lists: append($breakpoint-lists, $query);\n  }\n\n  //If retina was found in the query list\n  @if $retina-index {\n    $breakpoint-lists: __media-blender-add-retina($breakpoint-lists);\n  }\n\n  $breakpoint-lists: __media-blender-join-list($breakpoint-lists, ', ');\n\n  //actual media query - @content is were user content goes\n  @media #{$breakpoint-lists} {\n    @content;\n  }\n}\n","$app-text-primary: #222;\n$app-text-secondary: #444;\n$app-text-tertiary: #666;\n$app-text-white: #fff;\n$app-text-black: #000;\n\n$app-bg-body: #eee;\n$app-bg-container: #fff;\n\n$app-input-border: #ddd;\n$app-input-shadow: #f3f3f3;\n\n$app-card-bg: #fbfbfb;\n$app-card-border: #f3f3f3;\n$app-card-shadow: #f3f3f3;\n\n$app-table-border: #eee;\n$app-table-head-bg: #fbfbfb;\n","@import '../../assets/styles/core.scss';\r\n\r\n.card-wrapper {\r\n  width: 33.33%;\r\n  padding: 0.75rem;\r\n  display: flex;\r\n\r\n  @include media(mobile down) {\r\n    padding: 0.5rem 0;\r\n    width: 100%;\r\n  }\r\n\r\n  @include media(tablet) {\r\n    width: 50%;\r\n  }\r\n\r\n  .card {\r\n    background: $app-card-bg;\r\n    box-shadow: 0 2px 4px $app-card-shadow;\r\n    padding: 1rem;\r\n    border: 1px solid $app-card-border;\r\n    border-radius: 4px;\r\n\r\n    h3 {\r\n      padding: 0 0 1.5rem;\r\n    }\r\n\r\n    .card-img {\r\n      width: 100%;\r\n    }\r\n\r\n    small {\r\n      color: $app-text-tertiary;\r\n      font-size: 0.8rem;\r\n    }\r\n  }\r\n}\r\n","$media-breakpoints: (\n  small: 0 543,\n  mobile: 544 767,\n  tablet: 768 991,\n  desktop: 992 1199,\n  large: 1200\n) !default;\n\n@function __media-blender-validate-breakpoints($queries) {\n  $breakpoints: map-keys($media-breakpoints);\n  $keywords: up down retina;\n  $valid-words: join($breakpoints, $keywords);\n\n  @each $query in $queries {\n    @if (null == index($valid-words, $query)) {\n      @error 'Invalid query \"#{$query}\". Please check your breakpoints definition. Allowed values: #{$valid-words}';\n    }\n  }\n\n  @return true;\n}\n\n@function __media-blender-swap-elements($list, $i, $j) {\n  $tmp: nth($list, $i);\n  $list: set-nth($list, $i, nth($list, $j));\n  $list: set-nth($list, $j, $tmp);\n\n  @return $list;\n}\n\n// Bubble sort, efficiency questionable. Sorts queries by their\n// breakpoint values, ascendingly\n@function __media-blender-sort-queries($queries) {\n  $len: length($queries);\n\n  @for $i from 1 through $len {\n    @if $i < $len { // Avoid out-of-bounds errors\n      @for $j from $i + 1 through $len {\n        $left: map-get($media-breakpoints, nth($queries, $i));\n        $right: map-get($media-breakpoints, nth($queries, $j));\n\n        // If the right breakpoint's min is before the left's max\n        @if length($left) < 2 or nth($right, 1) < nth($left, 2) {\n          $queries: __media-blender-swap-elements($queries, $i, $j);\n        }\n      }\n    }\n  }\n\n  @return $queries;\n}\n\n// Assumes sorted\n@function __media-blender-remove-duplicate-queries($queries) {\n  $uniques: ();\n  $last: null;\n\n  @each $query in $queries {\n    @if $last == null or $query != $last {\n      $uniques: append($uniques, $query);\n    }\n\n    $last: $query;\n  }\n\n  @return $uniques;\n}\n\n@function __media-blender-expand-in-direction($breakpoint, $direction) {\n  $list: ();\n\n  $breakpoints-list: map-get($media-breakpoints, $breakpoint);\n  $min-point: nth($breakpoints-list, 1);\n  $max-point: if(length($breakpoints-list) >= 2, nth($breakpoints-list, 2), null);\n\n  @each $key, $value in $media-breakpoints {\n    @if $direction == up {\n      @if $max-point and $key != $breakpoint and nth($value, 1) >= $max-point {\n        $list: append($list, $key);\n      }\n    }\n\n    @else if $direction == down {\n      @if $min-point and $key != $breakpoint and length($value) >= 2 and nth($value, 2) <= $min-point {\n        $list: append($list, $key);\n      }\n    }\n\n    @else {\n      @error 'Invalid expansion direction #{$direction}';\n    }\n  }\n\n  @return $list;\n}\n\n@function __media-blender-expand($query) {\n  $latest: null;\n  $expanded-query: ();\n\n  @each $breakpoint in $query {\n    @if $breakpoint == up or $breakpoint == down {\n      @if $latest {\n        // Merged with existing list, allowing for queries\n        // such as \"small large up\"\n        $expanded-query: join($expanded-query, __media-blender-expand-in-direction($latest, $breakpoint));\n        $latest: null;\n      }\n\n      @else {\n        @error 'Cannot use up and down without a preceding breakpoint';\n      }\n    }\n\n    @else {\n      $expanded-query: append($expanded-query, $breakpoint);\n      $latest: $breakpoint;\n    }\n  }\n\n  @return $expanded-query;\n}\n\n@function __media-blender-remove-element($list, $value) {\n  $result: ();\n\n  @for $i from 1 through length($list) {\n    @if nth($list, $i) != $value {\n      $result: append($result, nth($list, $i));\n    }\n  }\n\n  @return $result;\n}\n\n@function __media-blender-remove-duplicates($list) {\n  $result: ();\n  $i: 0;\n\n  //remove all duplicates (both of them)\n  @each $item-first in $list {\n    $i: $i + 1;\n    $should-add: true;\n    $index: $i;\n    $j: 0;\n\n    @each $item-second in $list {\n      $j: $j + 1;\n\n      @if $item-first == $item-second and not ($j == $index) {\n        $should-add: false;\n      }\n    }\n\n    @if $should-add == true {\n      $result: append($result, $item-first);\n    }\n  }\n\n  @return $result;\n}\n\n@function __media-blender-join-queries($queries) {\n  //start list with 0, so it can be removed with\n  //duplicates/or used to determine min or max start\n  $groups: ();\n  $list: (0);\n  $last-max: 0;\n\n  //join list of breakpoints based on queries\n  @each $q in $queries {\n    @each $key, $val in $media-breakpoints {\n      @if $q == $key {\n        @if nth($val, 1) != $last-max and $last-max != 0 {\n          $groups: append($groups, __media-blender-remove-duplicates($list));\n          $list: (0);\n          $last-max: 0;\n        }\n\n        @if length($val) == 1 {\n          $list: join($list, $val);\n        }\n\n        @else {\n          $last-max: nth($val, 2) + 1;\n          $list: join($list, (nth($val, 1), $last-max));\n        }\n      }\n    }\n  }\n\n  @if length($list) > 1 {\n    $groups: append($groups, __media-blender-remove-duplicates($list));\n  }\n\n  @return $groups;\n}\n\n@function __media-blender-join-list($list, $separator) {\n  $result: '';\n\n  // Join with separator\n  @each $str in $list {\n    $result: $result + $str + $separator;\n  }\n\n  // Remove final instance of separator\n  $result: str-slice($result, 0, str-length($result) - str-length($separator));\n\n  //unqoute for usage withing query block - check out sass strings as for why\n  $result: unquote($result);\n\n  @return $result;\n}\n\n@function __media-blender-get-query($list, $flag: false) {\n  //list of non-adjacent query groups\n  $lists: ();\n\n  //list of strings to concatenate\n  $strings: ();\n\n  $last-max: 0;\n\n  //for each item in list, go back and forth between min width and max width\n  @each $item in $list {\n    @if $flag == true {\n      $strings: append($strings, '(min-width: #{$item}px)');\n      $flag: false;\n    }\n\n    @else {\n      $val: $item - 1;\n      $strings: append($strings, '(max-width: #{$val}px)');\n      $flag: true;\n    }\n  }\n\n  @return __media-blender-join-list($strings, ' and ');\n}\n\n@function __media-blender-add-retina($queries) {\n  @if (length($queries) == 0) {\n    @return (\n      unquote('(-webkit-min-device-pixel-ratio: 2)'),\n      unquote('(min-resolution: 192dpi)')\n    );\n  }\n\n  $retina-queries: ();\n\n  @each $query in $queries {\n    $webkit-query: unquote($query + ' and (-webkit-min-device-pixel-ratio: 2)');\n    $dpi-query: unquote($query + ' and (min-resolution: 192dpi)');\n\n    $retina-queries: append($retina-queries, $webkit-query);\n    $retina-queries: append($retina-queries, $dpi-query);\n  }\n\n  @return $retina-queries;\n}\n\n@function __media-blender-remove-nth($list, $index) {\n  $result: ();\n\n  @for $i from 1 through length($list) {\n    @if $i != $index {\n      $result: append($result, nth($list, $i));\n    }\n  }\n\n  @return $result;\n}\n\n@mixin media($queries, $orientation: null) {\n  $is-error-free: __media-blender-validate-breakpoints($queries);\n  $retina-index: index($queries, retina);\n\n  @if $retina-index {\n    $queries: __media-blender-remove-nth($queries, $retina-index);\n  }\n\n  // resolve up/down syntax for mobile-first and desktop-first\n  $queries: __media-blender-expand($queries);\n\n  //sort the queries for correct or-list (comma-separated) generation,\n  // and remove duplicates\n  $queries: __media-blender-sort-queries($queries);\n  $queries: __media-blender-remove-duplicate-queries($queries);\n  $query-lists: __media-blender-join-queries($queries);\n\n  $breakpoint-lists: ();\n\n  @each $query in $query-lists {\n    $skip-first-max: false;\n\n    //if the 0 survived, it means we must start with max to get correct results\n    //also remove the 0, makes no sense to use it in media queries\n    @if index($query, 0) {\n      $skip-first-max: true;\n      $query: __media-blender-remove-element($query, 0);\n    }\n\n    //get the query string from breakpoint-list\n    $query: __media-blender-get-query($query, $skip-first-max);\n\n    //if the query is empty it means all items in list\n    //were duplicates, meaning all were selected\n    @if $query == '' {\n      @if $orientation != null {\n        $query: '(orientation: #{$orientation})';\n      }\n\n      @else {\n        $query: all;\n      }\n    }\n\n    @else if $orientation != null {\n      $query: '#{$query} and (orientation: #{$orientation})';\n    }\n\n    $breakpoint-lists: append($breakpoint-lists, $query);\n  }\n\n  //If retina was found in the query list\n  @if $retina-index {\n    $breakpoint-lists: __media-blender-add-retina($breakpoint-lists);\n  }\n\n  $breakpoint-lists: __media-blender-join-list($breakpoint-lists, ', ');\n\n  //actual media query - @content is were user content goes\n  @media #{$breakpoint-lists} {\n    @content;\n  }\n}\n","$app-text-primary: #222;\n$app-text-secondary: #444;\n$app-text-tertiary: #666;\n$app-text-white: #fff;\n$app-text-black: #000;\n\n$app-bg-body: #eee;\n$app-bg-container: #fff;\n\n$app-input-border: #ddd;\n$app-input-shadow: #f3f3f3;\n\n$app-card-bg: #fbfbfb;\n$app-card-border: #f3f3f3;\n$app-card-shadow: #f3f3f3;\n\n$app-table-border: #eee;\n$app-table-head-bg: #fbfbfb;\n","@import '../../assets/styles/core.scss';\r\n\r\n.flex-table-wrapper {\r\n  border: 1px solid #ddd;\r\n  margin: 1rem 1.75rem;\r\n\r\n  @include media(tablet down) {\r\n    border: 0;\r\n  }\r\n\r\n  @include media(mobile down) {\r\n    margin: 1rem;\r\n  }\r\n\r\n  .table-head {\r\n    display: flex;\r\n    background: #fbfbfb;\r\n    \r\n    @include media(tablet down) {\r\n      display: none;\r\n    }\r\n\r\n    .th-cell {\r\n      flex: 1;\r\n      padding: 0.5rem;\r\n      border-right: 1px solid #ddd;\r\n      text-transform: capitalize;\r\n      text-align: center;\r\n      font-weight: 600; \r\n      \r\n      &:last-child {\r\n        border-right: 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  .table-body {\r\n    .table-row {\r\n      display: flex;\r\n      border-top: 1px solid #ddd;\r\n      position: relative;\r\n\r\n      @include media(tablet down) {\r\n        flex-wrap: wrap;\r\n        margin-bottom: 1rem;\r\n        flex-direction: column;\r\n        border: 1px solid #ddd;\r\n        background: #fbfbfb;\r\n        \r\n        &.first-child {\r\n          border-top: 0;\r\n        }\r\n      }\r\n      \r\n      .td-cell {\r\n        flex: 1;\r\n        padding: 0.5rem;\r\n        border-right: 1px solid #ddd;\r\n\r\n        @include media(tablet) {\r\n          width: 60%;\r\n        }\r\n\r\n        @include media(tablet down) {\r\n          border: 0;\r\n          border-bottom: 1px dashed #ddd;\r\n          padding: 0.5rem 1rem;\r\n\r\n          &:last-child {\r\n            border-bottom: 0;\r\n          }\r\n        }\r\n\r\n        &.td-img {\r\n          width: 25%;\r\n\r\n          @include media(tablet) {\r\n            position: absolute;\r\n            top: 0;\r\n            right: 0;\r\n            width: 40%;\r\n            height: 100%; \r\n            border-bottom: 0;\r\n          }\r\n\r\n          @include media(mobile down) {\r\n            width: 100%;\r\n          }\r\n\r\n          img {\r\n            width: 100%;\r\n            max-height: 100%;\r\n          }\r\n        }\r\n\r\n        &:last-child {\r\n          border-right: 0;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","$media-breakpoints: (\n  small: 0 543,\n  mobile: 544 767,\n  tablet: 768 991,\n  desktop: 992 1199,\n  large: 1200\n) !default;\n\n@function __media-blender-validate-breakpoints($queries) {\n  $breakpoints: map-keys($media-breakpoints);\n  $keywords: up down retina;\n  $valid-words: join($breakpoints, $keywords);\n\n  @each $query in $queries {\n    @if (null == index($valid-words, $query)) {\n      @error 'Invalid query \"#{$query}\". Please check your breakpoints definition. Allowed values: #{$valid-words}';\n    }\n  }\n\n  @return true;\n}\n\n@function __media-blender-swap-elements($list, $i, $j) {\n  $tmp: nth($list, $i);\n  $list: set-nth($list, $i, nth($list, $j));\n  $list: set-nth($list, $j, $tmp);\n\n  @return $list;\n}\n\n// Bubble sort, efficiency questionable. Sorts queries by their\n// breakpoint values, ascendingly\n@function __media-blender-sort-queries($queries) {\n  $len: length($queries);\n\n  @for $i from 1 through $len {\n    @if $i < $len { // Avoid out-of-bounds errors\n      @for $j from $i + 1 through $len {\n        $left: map-get($media-breakpoints, nth($queries, $i));\n        $right: map-get($media-breakpoints, nth($queries, $j));\n\n        // If the right breakpoint's min is before the left's max\n        @if length($left) < 2 or nth($right, 1) < nth($left, 2) {\n          $queries: __media-blender-swap-elements($queries, $i, $j);\n        }\n      }\n    }\n  }\n\n  @return $queries;\n}\n\n// Assumes sorted\n@function __media-blender-remove-duplicate-queries($queries) {\n  $uniques: ();\n  $last: null;\n\n  @each $query in $queries {\n    @if $last == null or $query != $last {\n      $uniques: append($uniques, $query);\n    }\n\n    $last: $query;\n  }\n\n  @return $uniques;\n}\n\n@function __media-blender-expand-in-direction($breakpoint, $direction) {\n  $list: ();\n\n  $breakpoints-list: map-get($media-breakpoints, $breakpoint);\n  $min-point: nth($breakpoints-list, 1);\n  $max-point: if(length($breakpoints-list) >= 2, nth($breakpoints-list, 2), null);\n\n  @each $key, $value in $media-breakpoints {\n    @if $direction == up {\n      @if $max-point and $key != $breakpoint and nth($value, 1) >= $max-point {\n        $list: append($list, $key);\n      }\n    }\n\n    @else if $direction == down {\n      @if $min-point and $key != $breakpoint and length($value) >= 2 and nth($value, 2) <= $min-point {\n        $list: append($list, $key);\n      }\n    }\n\n    @else {\n      @error 'Invalid expansion direction #{$direction}';\n    }\n  }\n\n  @return $list;\n}\n\n@function __media-blender-expand($query) {\n  $latest: null;\n  $expanded-query: ();\n\n  @each $breakpoint in $query {\n    @if $breakpoint == up or $breakpoint == down {\n      @if $latest {\n        // Merged with existing list, allowing for queries\n        // such as \"small large up\"\n        $expanded-query: join($expanded-query, __media-blender-expand-in-direction($latest, $breakpoint));\n        $latest: null;\n      }\n\n      @else {\n        @error 'Cannot use up and down without a preceding breakpoint';\n      }\n    }\n\n    @else {\n      $expanded-query: append($expanded-query, $breakpoint);\n      $latest: $breakpoint;\n    }\n  }\n\n  @return $expanded-query;\n}\n\n@function __media-blender-remove-element($list, $value) {\n  $result: ();\n\n  @for $i from 1 through length($list) {\n    @if nth($list, $i) != $value {\n      $result: append($result, nth($list, $i));\n    }\n  }\n\n  @return $result;\n}\n\n@function __media-blender-remove-duplicates($list) {\n  $result: ();\n  $i: 0;\n\n  //remove all duplicates (both of them)\n  @each $item-first in $list {\n    $i: $i + 1;\n    $should-add: true;\n    $index: $i;\n    $j: 0;\n\n    @each $item-second in $list {\n      $j: $j + 1;\n\n      @if $item-first == $item-second and not ($j == $index) {\n        $should-add: false;\n      }\n    }\n\n    @if $should-add == true {\n      $result: append($result, $item-first);\n    }\n  }\n\n  @return $result;\n}\n\n@function __media-blender-join-queries($queries) {\n  //start list with 0, so it can be removed with\n  //duplicates/or used to determine min or max start\n  $groups: ();\n  $list: (0);\n  $last-max: 0;\n\n  //join list of breakpoints based on queries\n  @each $q in $queries {\n    @each $key, $val in $media-breakpoints {\n      @if $q == $key {\n        @if nth($val, 1) != $last-max and $last-max != 0 {\n          $groups: append($groups, __media-blender-remove-duplicates($list));\n          $list: (0);\n          $last-max: 0;\n        }\n\n        @if length($val) == 1 {\n          $list: join($list, $val);\n        }\n\n        @else {\n          $last-max: nth($val, 2) + 1;\n          $list: join($list, (nth($val, 1), $last-max));\n        }\n      }\n    }\n  }\n\n  @if length($list) > 1 {\n    $groups: append($groups, __media-blender-remove-duplicates($list));\n  }\n\n  @return $groups;\n}\n\n@function __media-blender-join-list($list, $separator) {\n  $result: '';\n\n  // Join with separator\n  @each $str in $list {\n    $result: $result + $str + $separator;\n  }\n\n  // Remove final instance of separator\n  $result: str-slice($result, 0, str-length($result) - str-length($separator));\n\n  //unqoute for usage withing query block - check out sass strings as for why\n  $result: unquote($result);\n\n  @return $result;\n}\n\n@function __media-blender-get-query($list, $flag: false) {\n  //list of non-adjacent query groups\n  $lists: ();\n\n  //list of strings to concatenate\n  $strings: ();\n\n  $last-max: 0;\n\n  //for each item in list, go back and forth between min width and max width\n  @each $item in $list {\n    @if $flag == true {\n      $strings: append($strings, '(min-width: #{$item}px)');\n      $flag: false;\n    }\n\n    @else {\n      $val: $item - 1;\n      $strings: append($strings, '(max-width: #{$val}px)');\n      $flag: true;\n    }\n  }\n\n  @return __media-blender-join-list($strings, ' and ');\n}\n\n@function __media-blender-add-retina($queries) {\n  @if (length($queries) == 0) {\n    @return (\n      unquote('(-webkit-min-device-pixel-ratio: 2)'),\n      unquote('(min-resolution: 192dpi)')\n    );\n  }\n\n  $retina-queries: ();\n\n  @each $query in $queries {\n    $webkit-query: unquote($query + ' and (-webkit-min-device-pixel-ratio: 2)');\n    $dpi-query: unquote($query + ' and (min-resolution: 192dpi)');\n\n    $retina-queries: append($retina-queries, $webkit-query);\n    $retina-queries: append($retina-queries, $dpi-query);\n  }\n\n  @return $retina-queries;\n}\n\n@function __media-blender-remove-nth($list, $index) {\n  $result: ();\n\n  @for $i from 1 through length($list) {\n    @if $i != $index {\n      $result: append($result, nth($list, $i));\n    }\n  }\n\n  @return $result;\n}\n\n@mixin media($queries, $orientation: null) {\n  $is-error-free: __media-blender-validate-breakpoints($queries);\n  $retina-index: index($queries, retina);\n\n  @if $retina-index {\n    $queries: __media-blender-remove-nth($queries, $retina-index);\n  }\n\n  // resolve up/down syntax for mobile-first and desktop-first\n  $queries: __media-blender-expand($queries);\n\n  //sort the queries for correct or-list (comma-separated) generation,\n  // and remove duplicates\n  $queries: __media-blender-sort-queries($queries);\n  $queries: __media-blender-remove-duplicate-queries($queries);\n  $query-lists: __media-blender-join-queries($queries);\n\n  $breakpoint-lists: ();\n\n  @each $query in $query-lists {\n    $skip-first-max: false;\n\n    //if the 0 survived, it means we must start with max to get correct results\n    //also remove the 0, makes no sense to use it in media queries\n    @if index($query, 0) {\n      $skip-first-max: true;\n      $query: __media-blender-remove-element($query, 0);\n    }\n\n    //get the query string from breakpoint-list\n    $query: __media-blender-get-query($query, $skip-first-max);\n\n    //if the query is empty it means all items in list\n    //were duplicates, meaning all were selected\n    @if $query == '' {\n      @if $orientation != null {\n        $query: '(orientation: #{$orientation})';\n      }\n\n      @else {\n        $query: all;\n      }\n    }\n\n    @else if $orientation != null {\n      $query: '#{$query} and (orientation: #{$orientation})';\n    }\n\n    $breakpoint-lists: append($breakpoint-lists, $query);\n  }\n\n  //If retina was found in the query list\n  @if $retina-index {\n    $breakpoint-lists: __media-blender-add-retina($breakpoint-lists);\n  }\n\n  $breakpoint-lists: __media-blender-join-list($breakpoint-lists, ', ');\n\n  //actual media query - @content is were user content goes\n  @media #{$breakpoint-lists} {\n    @content;\n  }\n}\n","@import '../../assets/styles/core.scss';\r\n\r\n.feed-container {\r\n  .flexi-header {\r\n    display: flex;\r\n    align-items: center;\r\n    flex-wrap: wrap;\r\n    padding: 0 1.75rem 0.5rem;\r\n\r\n    @include media(mobile down) {\r\n      padding: 0 1rem 0.5rem;\r\n    }\r\n\r\n    h1 {\r\n      width: 100%;\r\n      \r\n      @include media(mobile down) {\r\n        width: 25%;\r\n      }\r\n    }\r\n  }\r\n  \r\n  h2 {\r\n    margin-top: 2rem;\r\n    padding: 0 1.75rem;\r\n\r\n    @include media(mobile down) {\r\n      margin-top: 2rem;\r\n      padding: 0 1rem;\r\n    }\r\n  }\r\n\r\n  .cards-container {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    padding: 0 1rem;\r\n  }\r\n}\r\n","$media-breakpoints: (\n  small: 0 543,\n  mobile: 544 767,\n  tablet: 768 991,\n  desktop: 992 1199,\n  large: 1200\n) !default;\n\n@function __media-blender-validate-breakpoints($queries) {\n  $breakpoints: map-keys($media-breakpoints);\n  $keywords: up down retina;\n  $valid-words: join($breakpoints, $keywords);\n\n  @each $query in $queries {\n    @if (null == index($valid-words, $query)) {\n      @error 'Invalid query \"#{$query}\". Please check your breakpoints definition. Allowed values: #{$valid-words}';\n    }\n  }\n\n  @return true;\n}\n\n@function __media-blender-swap-elements($list, $i, $j) {\n  $tmp: nth($list, $i);\n  $list: set-nth($list, $i, nth($list, $j));\n  $list: set-nth($list, $j, $tmp);\n\n  @return $list;\n}\n\n// Bubble sort, efficiency questionable. Sorts queries by their\n// breakpoint values, ascendingly\n@function __media-blender-sort-queries($queries) {\n  $len: length($queries);\n\n  @for $i from 1 through $len {\n    @if $i < $len { // Avoid out-of-bounds errors\n      @for $j from $i + 1 through $len {\n        $left: map-get($media-breakpoints, nth($queries, $i));\n        $right: map-get($media-breakpoints, nth($queries, $j));\n\n        // If the right breakpoint's min is before the left's max\n        @if length($left) < 2 or nth($right, 1) < nth($left, 2) {\n          $queries: __media-blender-swap-elements($queries, $i, $j);\n        }\n      }\n    }\n  }\n\n  @return $queries;\n}\n\n// Assumes sorted\n@function __media-blender-remove-duplicate-queries($queries) {\n  $uniques: ();\n  $last: null;\n\n  @each $query in $queries {\n    @if $last == null or $query != $last {\n      $uniques: append($uniques, $query);\n    }\n\n    $last: $query;\n  }\n\n  @return $uniques;\n}\n\n@function __media-blender-expand-in-direction($breakpoint, $direction) {\n  $list: ();\n\n  $breakpoints-list: map-get($media-breakpoints, $breakpoint);\n  $min-point: nth($breakpoints-list, 1);\n  $max-point: if(length($breakpoints-list) >= 2, nth($breakpoints-list, 2), null);\n\n  @each $key, $value in $media-breakpoints {\n    @if $direction == up {\n      @if $max-point and $key != $breakpoint and nth($value, 1) >= $max-point {\n        $list: append($list, $key);\n      }\n    }\n\n    @else if $direction == down {\n      @if $min-point and $key != $breakpoint and length($value) >= 2 and nth($value, 2) <= $min-point {\n        $list: append($list, $key);\n      }\n    }\n\n    @else {\n      @error 'Invalid expansion direction #{$direction}';\n    }\n  }\n\n  @return $list;\n}\n\n@function __media-blender-expand($query) {\n  $latest: null;\n  $expanded-query: ();\n\n  @each $breakpoint in $query {\n    @if $breakpoint == up or $breakpoint == down {\n      @if $latest {\n        // Merged with existing list, allowing for queries\n        // such as \"small large up\"\n        $expanded-query: join($expanded-query, __media-blender-expand-in-direction($latest, $breakpoint));\n        $latest: null;\n      }\n\n      @else {\n        @error 'Cannot use up and down without a preceding breakpoint';\n      }\n    }\n\n    @else {\n      $expanded-query: append($expanded-query, $breakpoint);\n      $latest: $breakpoint;\n    }\n  }\n\n  @return $expanded-query;\n}\n\n@function __media-blender-remove-element($list, $value) {\n  $result: ();\n\n  @for $i from 1 through length($list) {\n    @if nth($list, $i) != $value {\n      $result: append($result, nth($list, $i));\n    }\n  }\n\n  @return $result;\n}\n\n@function __media-blender-remove-duplicates($list) {\n  $result: ();\n  $i: 0;\n\n  //remove all duplicates (both of them)\n  @each $item-first in $list {\n    $i: $i + 1;\n    $should-add: true;\n    $index: $i;\n    $j: 0;\n\n    @each $item-second in $list {\n      $j: $j + 1;\n\n      @if $item-first == $item-second and not ($j == $index) {\n        $should-add: false;\n      }\n    }\n\n    @if $should-add == true {\n      $result: append($result, $item-first);\n    }\n  }\n\n  @return $result;\n}\n\n@function __media-blender-join-queries($queries) {\n  //start list with 0, so it can be removed with\n  //duplicates/or used to determine min or max start\n  $groups: ();\n  $list: (0);\n  $last-max: 0;\n\n  //join list of breakpoints based on queries\n  @each $q in $queries {\n    @each $key, $val in $media-breakpoints {\n      @if $q == $key {\n        @if nth($val, 1) != $last-max and $last-max != 0 {\n          $groups: append($groups, __media-blender-remove-duplicates($list));\n          $list: (0);\n          $last-max: 0;\n        }\n\n        @if length($val) == 1 {\n          $list: join($list, $val);\n        }\n\n        @else {\n          $last-max: nth($val, 2) + 1;\n          $list: join($list, (nth($val, 1), $last-max));\n        }\n      }\n    }\n  }\n\n  @if length($list) > 1 {\n    $groups: append($groups, __media-blender-remove-duplicates($list));\n  }\n\n  @return $groups;\n}\n\n@function __media-blender-join-list($list, $separator) {\n  $result: '';\n\n  // Join with separator\n  @each $str in $list {\n    $result: $result + $str + $separator;\n  }\n\n  // Remove final instance of separator\n  $result: str-slice($result, 0, str-length($result) - str-length($separator));\n\n  //unqoute for usage withing query block - check out sass strings as for why\n  $result: unquote($result);\n\n  @return $result;\n}\n\n@function __media-blender-get-query($list, $flag: false) {\n  //list of non-adjacent query groups\n  $lists: ();\n\n  //list of strings to concatenate\n  $strings: ();\n\n  $last-max: 0;\n\n  //for each item in list, go back and forth between min width and max width\n  @each $item in $list {\n    @if $flag == true {\n      $strings: append($strings, '(min-width: #{$item}px)');\n      $flag: false;\n    }\n\n    @else {\n      $val: $item - 1;\n      $strings: append($strings, '(max-width: #{$val}px)');\n      $flag: true;\n    }\n  }\n\n  @return __media-blender-join-list($strings, ' and ');\n}\n\n@function __media-blender-add-retina($queries) {\n  @if (length($queries) == 0) {\n    @return (\n      unquote('(-webkit-min-device-pixel-ratio: 2)'),\n      unquote('(min-resolution: 192dpi)')\n    );\n  }\n\n  $retina-queries: ();\n\n  @each $query in $queries {\n    $webkit-query: unquote($query + ' and (-webkit-min-device-pixel-ratio: 2)');\n    $dpi-query: unquote($query + ' and (min-resolution: 192dpi)');\n\n    $retina-queries: append($retina-queries, $webkit-query);\n    $retina-queries: append($retina-queries, $dpi-query);\n  }\n\n  @return $retina-queries;\n}\n\n@function __media-blender-remove-nth($list, $index) {\n  $result: ();\n\n  @for $i from 1 through length($list) {\n    @if $i != $index {\n      $result: append($result, nth($list, $i));\n    }\n  }\n\n  @return $result;\n}\n\n@mixin media($queries, $orientation: null) {\n  $is-error-free: __media-blender-validate-breakpoints($queries);\n  $retina-index: index($queries, retina);\n\n  @if $retina-index {\n    $queries: __media-blender-remove-nth($queries, $retina-index);\n  }\n\n  // resolve up/down syntax for mobile-first and desktop-first\n  $queries: __media-blender-expand($queries);\n\n  //sort the queries for correct or-list (comma-separated) generation,\n  // and remove duplicates\n  $queries: __media-blender-sort-queries($queries);\n  $queries: __media-blender-remove-duplicate-queries($queries);\n  $query-lists: __media-blender-join-queries($queries);\n\n  $breakpoint-lists: ();\n\n  @each $query in $query-lists {\n    $skip-first-max: false;\n\n    //if the 0 survived, it means we must start with max to get correct results\n    //also remove the 0, makes no sense to use it in media queries\n    @if index($query, 0) {\n      $skip-first-max: true;\n      $query: __media-blender-remove-element($query, 0);\n    }\n\n    //get the query string from breakpoint-list\n    $query: __media-blender-get-query($query, $skip-first-max);\n\n    //if the query is empty it means all items in list\n    //were duplicates, meaning all were selected\n    @if $query == '' {\n      @if $orientation != null {\n        $query: '(orientation: #{$orientation})';\n      }\n\n      @else {\n        $query: all;\n      }\n    }\n\n    @else if $orientation != null {\n      $query: '#{$query} and (orientation: #{$orientation})';\n    }\n\n    $breakpoint-lists: append($breakpoint-lists, $query);\n  }\n\n  //If retina was found in the query list\n  @if $retina-index {\n    $breakpoint-lists: __media-blender-add-retina($breakpoint-lists);\n  }\n\n  $breakpoint-lists: __media-blender-join-list($breakpoint-lists, ', ');\n\n  //actual media query - @content is were user content goes\n  @media #{$breakpoint-lists} {\n    @content;\n  }\n}\n","@import './assets/styles/core.scss';\n\n.app-container {\n  max-width: $container-max-width;\n  background: $app-bg-container;\n  min-height: 100vh;\n  padding-bottom: 2rem;\n\n  @include media(large up) {\n    margin: 0 auto;\n  }\n}\n","@import 'media-blender';\r\n\r\n$media-breakpoints: (\r\n  mobile: 0 600,\r\n  tablet: 601 960,\r\n  desktop: 961 1280,\r\n  large: 1281,\r\n);\r\n\r\n$container-max-width: 1280px;\r\n","$app-text-primary: #222;\n$app-text-secondary: #444;\n$app-text-tertiary: #666;\n$app-text-white: #fff;\n$app-text-black: #000;\n\n$app-bg-body: #eee;\n$app-bg-container: #fff;\n\n$app-input-border: #ddd;\n$app-input-shadow: #f3f3f3;\n\n$app-card-bg: #fbfbfb;\n$app-card-border: #f3f3f3;\n$app-card-shadow: #f3f3f3;\n\n$app-table-border: #eee;\n$app-table-head-bg: #fbfbfb;\n","$media-breakpoints: (\n  small: 0 543,\n  mobile: 544 767,\n  tablet: 768 991,\n  desktop: 992 1199,\n  large: 1200\n) !default;\n\n@function __media-blender-validate-breakpoints($queries) {\n  $breakpoints: map-keys($media-breakpoints);\n  $keywords: up down retina;\n  $valid-words: join($breakpoints, $keywords);\n\n  @each $query in $queries {\n    @if (null == index($valid-words, $query)) {\n      @error 'Invalid query \"#{$query}\". Please check your breakpoints definition. Allowed values: #{$valid-words}';\n    }\n  }\n\n  @return true;\n}\n\n@function __media-blender-swap-elements($list, $i, $j) {\n  $tmp: nth($list, $i);\n  $list: set-nth($list, $i, nth($list, $j));\n  $list: set-nth($list, $j, $tmp);\n\n  @return $list;\n}\n\n// Bubble sort, efficiency questionable. Sorts queries by their\n// breakpoint values, ascendingly\n@function __media-blender-sort-queries($queries) {\n  $len: length($queries);\n\n  @for $i from 1 through $len {\n    @if $i < $len { // Avoid out-of-bounds errors\n      @for $j from $i + 1 through $len {\n        $left: map-get($media-breakpoints, nth($queries, $i));\n        $right: map-get($media-breakpoints, nth($queries, $j));\n\n        // If the right breakpoint's min is before the left's max\n        @if length($left) < 2 or nth($right, 1) < nth($left, 2) {\n          $queries: __media-blender-swap-elements($queries, $i, $j);\n        }\n      }\n    }\n  }\n\n  @return $queries;\n}\n\n// Assumes sorted\n@function __media-blender-remove-duplicate-queries($queries) {\n  $uniques: ();\n  $last: null;\n\n  @each $query in $queries {\n    @if $last == null or $query != $last {\n      $uniques: append($uniques, $query);\n    }\n\n    $last: $query;\n  }\n\n  @return $uniques;\n}\n\n@function __media-blender-expand-in-direction($breakpoint, $direction) {\n  $list: ();\n\n  $breakpoints-list: map-get($media-breakpoints, $breakpoint);\n  $min-point: nth($breakpoints-list, 1);\n  $max-point: if(length($breakpoints-list) >= 2, nth($breakpoints-list, 2), null);\n\n  @each $key, $value in $media-breakpoints {\n    @if $direction == up {\n      @if $max-point and $key != $breakpoint and nth($value, 1) >= $max-point {\n        $list: append($list, $key);\n      }\n    }\n\n    @else if $direction == down {\n      @if $min-point and $key != $breakpoint and length($value) >= 2 and nth($value, 2) <= $min-point {\n        $list: append($list, $key);\n      }\n    }\n\n    @else {\n      @error 'Invalid expansion direction #{$direction}';\n    }\n  }\n\n  @return $list;\n}\n\n@function __media-blender-expand($query) {\n  $latest: null;\n  $expanded-query: ();\n\n  @each $breakpoint in $query {\n    @if $breakpoint == up or $breakpoint == down {\n      @if $latest {\n        // Merged with existing list, allowing for queries\n        // such as \"small large up\"\n        $expanded-query: join($expanded-query, __media-blender-expand-in-direction($latest, $breakpoint));\n        $latest: null;\n      }\n\n      @else {\n        @error 'Cannot use up and down without a preceding breakpoint';\n      }\n    }\n\n    @else {\n      $expanded-query: append($expanded-query, $breakpoint);\n      $latest: $breakpoint;\n    }\n  }\n\n  @return $expanded-query;\n}\n\n@function __media-blender-remove-element($list, $value) {\n  $result: ();\n\n  @for $i from 1 through length($list) {\n    @if nth($list, $i) != $value {\n      $result: append($result, nth($list, $i));\n    }\n  }\n\n  @return $result;\n}\n\n@function __media-blender-remove-duplicates($list) {\n  $result: ();\n  $i: 0;\n\n  //remove all duplicates (both of them)\n  @each $item-first in $list {\n    $i: $i + 1;\n    $should-add: true;\n    $index: $i;\n    $j: 0;\n\n    @each $item-second in $list {\n      $j: $j + 1;\n\n      @if $item-first == $item-second and not ($j == $index) {\n        $should-add: false;\n      }\n    }\n\n    @if $should-add == true {\n      $result: append($result, $item-first);\n    }\n  }\n\n  @return $result;\n}\n\n@function __media-blender-join-queries($queries) {\n  //start list with 0, so it can be removed with\n  //duplicates/or used to determine min or max start\n  $groups: ();\n  $list: (0);\n  $last-max: 0;\n\n  //join list of breakpoints based on queries\n  @each $q in $queries {\n    @each $key, $val in $media-breakpoints {\n      @if $q == $key {\n        @if nth($val, 1) != $last-max and $last-max != 0 {\n          $groups: append($groups, __media-blender-remove-duplicates($list));\n          $list: (0);\n          $last-max: 0;\n        }\n\n        @if length($val) == 1 {\n          $list: join($list, $val);\n        }\n\n        @else {\n          $last-max: nth($val, 2) + 1;\n          $list: join($list, (nth($val, 1), $last-max));\n        }\n      }\n    }\n  }\n\n  @if length($list) > 1 {\n    $groups: append($groups, __media-blender-remove-duplicates($list));\n  }\n\n  @return $groups;\n}\n\n@function __media-blender-join-list($list, $separator) {\n  $result: '';\n\n  // Join with separator\n  @each $str in $list {\n    $result: $result + $str + $separator;\n  }\n\n  // Remove final instance of separator\n  $result: str-slice($result, 0, str-length($result) - str-length($separator));\n\n  //unqoute for usage withing query block - check out sass strings as for why\n  $result: unquote($result);\n\n  @return $result;\n}\n\n@function __media-blender-get-query($list, $flag: false) {\n  //list of non-adjacent query groups\n  $lists: ();\n\n  //list of strings to concatenate\n  $strings: ();\n\n  $last-max: 0;\n\n  //for each item in list, go back and forth between min width and max width\n  @each $item in $list {\n    @if $flag == true {\n      $strings: append($strings, '(min-width: #{$item}px)');\n      $flag: false;\n    }\n\n    @else {\n      $val: $item - 1;\n      $strings: append($strings, '(max-width: #{$val}px)');\n      $flag: true;\n    }\n  }\n\n  @return __media-blender-join-list($strings, ' and ');\n}\n\n@function __media-blender-add-retina($queries) {\n  @if (length($queries) == 0) {\n    @return (\n      unquote('(-webkit-min-device-pixel-ratio: 2)'),\n      unquote('(min-resolution: 192dpi)')\n    );\n  }\n\n  $retina-queries: ();\n\n  @each $query in $queries {\n    $webkit-query: unquote($query + ' and (-webkit-min-device-pixel-ratio: 2)');\n    $dpi-query: unquote($query + ' and (min-resolution: 192dpi)');\n\n    $retina-queries: append($retina-queries, $webkit-query);\n    $retina-queries: append($retina-queries, $dpi-query);\n  }\n\n  @return $retina-queries;\n}\n\n@function __media-blender-remove-nth($list, $index) {\n  $result: ();\n\n  @for $i from 1 through length($list) {\n    @if $i != $index {\n      $result: append($result, nth($list, $i));\n    }\n  }\n\n  @return $result;\n}\n\n@mixin media($queries, $orientation: null) {\n  $is-error-free: __media-blender-validate-breakpoints($queries);\n  $retina-index: index($queries, retina);\n\n  @if $retina-index {\n    $queries: __media-blender-remove-nth($queries, $retina-index);\n  }\n\n  // resolve up/down syntax for mobile-first and desktop-first\n  $queries: __media-blender-expand($queries);\n\n  //sort the queries for correct or-list (comma-separated) generation,\n  // and remove duplicates\n  $queries: __media-blender-sort-queries($queries);\n  $queries: __media-blender-remove-duplicate-queries($queries);\n  $query-lists: __media-blender-join-queries($queries);\n\n  $breakpoint-lists: ();\n\n  @each $query in $query-lists {\n    $skip-first-max: false;\n\n    //if the 0 survived, it means we must start with max to get correct results\n    //also remove the 0, makes no sense to use it in media queries\n    @if index($query, 0) {\n      $skip-first-max: true;\n      $query: __media-blender-remove-element($query, 0);\n    }\n\n    //get the query string from breakpoint-list\n    $query: __media-blender-get-query($query, $skip-first-max);\n\n    //if the query is empty it means all items in list\n    //were duplicates, meaning all were selected\n    @if $query == '' {\n      @if $orientation != null {\n        $query: '(orientation: #{$orientation})';\n      }\n\n      @else {\n        $query: all;\n      }\n    }\n\n    @else if $orientation != null {\n      $query: '#{$query} and (orientation: #{$orientation})';\n    }\n\n    $breakpoint-lists: append($breakpoint-lists, $query);\n  }\n\n  //If retina was found in the query list\n  @if $retina-index {\n    $breakpoint-lists: __media-blender-add-retina($breakpoint-lists);\n  }\n\n  $breakpoint-lists: __media-blender-join-list($breakpoint-lists, ', ');\n\n  //actual media query - @content is were user content goes\n  @media #{$breakpoint-lists} {\n    @content;\n  }\n}\n"]}