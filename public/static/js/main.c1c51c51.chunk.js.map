{"version":3,"sources":["components/Search/index.js","components/Search/Search.jsx","components/Sort/index.js","components/Sort/Sort.jsx","components/FeedCard/index.js","components/FeedCard/FeedCard.jsx","components/FeedTable/index.js","components/FeedTable/FeedTable.jsx","constants.js","utils/index.js","containers/Feed/index.js","containers/Feed/Feed.jsx","App.js","serviceWorker.js","index.js"],"names":["Search","_ref","searchStr","setSearchStr","react_default","a","createElement","className","type","name","placeholder","value","onChange","e","target","Sort","sort","sortOptions","setSortConfig","map","opt","i","key","title","FeedCard","cardDetails","src","image","alt","description","Date","date","toLocaleString","FeedTable","data","row","SORT_OPTIONS","getDataFromAPI","url","Promise","res","rej","process","toLowerCase","fetch","then","json","catch","err","CardsData","require","Feed","state","cardsData","this","setState","console","_context","t0","arguments","length","undefined","sortBy","arr","b","parse","customSort","filter","obj","includes","slice","str","props","match","params","history","push","concat","sortConfig","_this2","_this$props$match$par","filteredData","getFilteredCards","role","components_Search","components_Sort","config","card","components_FeedCard","components_FeedTable","Component","App","BrowserRouter","Switch","Route","exact","path","component","Redirect","to","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c1c51c51.chunk.js","sourcesContent":["import Search from \"./Search\";\r\nexport default Search;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './Search.scss';\r\n\r\nconst Search = ({ searchStr, setSearchStr }) => {\r\n  return (\r\n    <div className=\"search-wrapper\">\r\n      <div className=\"search-box\">\r\n        <input\r\n          type=\"text\"\r\n          name=\"search\"\r\n          className=\"search-bar\"\r\n          placeholder=\"Filter items...\"\r\n          value={searchStr}\r\n          onChange={(e) => setSearchStr(e.target.value)}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nSearch.propTypes = {\r\n  searchStr: PropTypes.string,\r\n  setSearchStr: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Search;","import Sort from \"./Sort\";\r\nexport default Sort;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./Sort.scss\";\r\n\r\nconst Sort = ({ sort, sortOptions, setSortConfig }) => {\r\n  return (\r\n    <div className=\"sort-wrapper\">\r\n      <div className=\"label\">Sort by:</div>\r\n      <div className=\"select-box\">\r\n        <select value={sort} onChange={(e) => setSortConfig(e.target.value)}>\r\n          {\r\n            sortOptions.map((opt, i) => (\r\n              <option key={opt.value} value={opt.value}>{opt.title}</option>\r\n            ))\r\n          }\r\n        </select>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nSort.propTypes = {\r\n  sort: PropTypes.string.isRequired,\r\n  sortOptions: PropTypes.array.isRequired,\r\n  setSortConfig: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Sort;\r\n","import FeedCard from './FeedCard';\r\nexport default FeedCard;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './FeedCard.scss';\r\n\r\nconst FeedCard = ({ cardDetails }) => {\r\n  return (\r\n    <article className=\"card-wrapper\">\r\n      <div className=\"card\">\r\n        <h3>{cardDetails.name}</h3>\r\n        <img\r\n          src={cardDetails.image}\r\n          alt={cardDetails.name}\r\n          className=\"card-img\"\r\n        />\r\n        <p>{cardDetails.description}</p>\r\n        <small>{new Date(cardDetails.date).toLocaleString()}</small>\r\n      </div>\r\n    </article>\r\n  );\r\n};\r\n\r\nFeedCard.propTypes = {\r\n  cardDetails: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default FeedCard;","import FeedTable from './FeedTable';\r\nexport default FeedTable;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './FeedTable.scss';\r\n\r\nconst FeedTable = ({ data }) => {\r\n  return <div className=\"scroll-overlay\">\r\n    <div className=\"table-wrapper\">\r\n      <table className=\"feed-table\">\r\n        <thead>\r\n          <tr>\r\n            <th>Name</th>\r\n            <th>Image</th>\r\n            <th>Description</th>\r\n            <th>Date</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {data.map((row, i) => <tr key={i}>\r\n            <td className=\"card-name\">{row.name}</td>\r\n            <td className=\"card-img-wrap\">\r\n              <img\r\n                src={row.image}\r\n                alt={row.name}\r\n                className=\"cell-img\"\r\n              />\r\n            </td>\r\n            <td className=\"card-desc\">{row.description}</td>\r\n            <td className=\"card-date\">{new Date(row.date).toLocaleString()}</td>\r\n          </tr>)}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  </div>;\r\n};\r\n\r\nFeedTable.propTypes = {\r\n  data: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default FeedTable;","/* App Constants */\r\n\r\nexport const CARDS_PER_PAGE = 5;\r\nexport const DEFAULT_SEARCH_STR = '';\r\nexport const SORT_OPTIONS = [\r\n  { title: \"Title\", value: \"name\" },\r\n  { title: \"Title Reverse\", value: \"name_r\" },\r\n  { title: \"Date\", value: \"date\" },\r\n  { title: \"Date Reverse\", value: \"date_r\" }\r\n];\r\nexport const DEFAULT_SORT = 'name';\r\n\r\n\r\n/* API URLs */\r\nexport const MOCK_DATA_URL = \"../../static/mock_data.json\"; // Change to API URL when deploying to Prod\r\n","/**\r\n * Push/Update application filter settings to localStorage\r\n * @param state - State object containing filters configuration\r\n * @returns null\r\n */\r\nexport const updateLocalStorage = state => {\r\n  localStorage.setItem(\"feedState\", JSON.stringify(state));\r\n};\r\n\r\n/**\r\n * Fetch existing configuration setting for app filters from localStorage\r\n * @returns object - State object\r\n */\r\nexport const fetchFromLocalStorage = () => {\r\n  return JSON.parse(localStorage.getItem(\"feedState\"));\r\n};\r\n\r\n/**\r\n * Sort a list of objects based on the sort type selected.\r\n * Sorts by name as default option if no/incorrect sort filter specified.\r\n * @param arr - List of objects to sort\r\n * @param sortBy - Filter to sort the array: name, name_r (Reverse), date, date_r (Reverse)\r\n * @returns arr - Sorted list of objects\r\n */\r\nexport const customSort = (arr, sortBy) => {\r\n  return arr.sort((a, b) => {\r\n    switch (sortBy) {\r\n      case \"name\":\r\n        return a.name > b.name ? 1 : b.name > a.name ? -1 : 0;\r\n      case \"name_r\":\r\n        return a.name < b.name ? 1 : b.name < a.name ? -1 : 0;\r\n      case \"date\":\r\n        return Date.parse(a.date) > Date.parse(b.date)\r\n          ? 1\r\n          : Date.parse(b.date) > Date.parse(a.date)\r\n            ? -1\r\n            : 0;\r\n      case \"date_r\":\r\n        return Date.parse(a.date) < Date.parse(b.date)\r\n          ? 1\r\n          : Date.parse(b.date) < Date.parse(a.date)\r\n            ? -1\r\n            : 0;\r\n      default:\r\n        return a.name > b.name ? 1 : b.name > a.name ? -1 : 0;\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Executes a GET HTTP call to fetch the data from the URL specified.\r\n * In development mode, it imports the file directly.\r\n * @param url - API URL or file path if present locally.\r\n * @returns promise - Promise with data on successful execution, or error in case of request failure.\r\n */\r\nexport const getDataFromAPI = (url) =>\r\n  new Promise((res, rej) => {\r\n    /* Since CRA webpack-dev-server is configured by default to return index.html as fallback \r\n    for dot-notation paths - importing the Mock Data if running in Dev mode is an alternative. */\r\n    if (process.env.NODE_ENV.toLowerCase() === 'development') {\r\n      const CardsData = require('../static/mock_data.json');\r\n      res(CardsData);\r\n      return;\r\n    }\r\n\r\n    fetch(url)\r\n      .then((res) => res.json())\r\n      .then((data) => res(data))\r\n      .catch((err) => rej(err));\r\n  });\r\n","import Feed from './Feed';\r\nexport default Feed;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Search from '../../components/Search';\r\nimport Sort from \"../../components/Sort\";\r\nimport FeedCard from \"../../components/FeedCard\";\r\nimport FeedTable from \"../../components/FeedTable\";\r\n\r\nimport {\r\n  CARDS_PER_PAGE,\r\n  DEFAULT_SEARCH_STR,\r\n  SORT_OPTIONS,\r\n  DEFAULT_SORT,\r\n  MOCK_DATA_URL\r\n} from \"../../constants\";\r\nimport {\r\n  customSort,\r\n  getDataFromAPI,\r\n} from \"../../utils\";\r\nimport './Feed.scss';\r\n\r\nclass Feed extends Component {\r\n  state = {\r\n    cardsData: [],\r\n  }\r\n  \r\n  async componentDidMount() {\r\n    try {\r\n      const cardsData = await getDataFromAPI(MOCK_DATA_URL);\r\n      this.setState({\r\n        cardsData\r\n      });\r\n    } catch (err) {\r\n      console.err('Mock Data GET request failed', err);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get a filtered list of cards based on search string and sort type specified\r\n   * @param seachStr - Search string passed as part of route params. Default DEFAULT_SEARCH_STR\r\n   * @param sortBy - Sort method passed as part of route params. Default DEFAULT_SORT\r\n   * @returns arr - List of cards after search and sort filters applied and sliced as per CARDS_PER_PAGE value\r\n   */\r\n  getFilteredCards(searchStr = DEFAULT_SEARCH_STR, sortBy = DEFAULT_SORT) {\r\n    const filteredItems = this.state.cardsData.filter(\r\n      obj =>\r\n        obj.name.toLowerCase().includes(searchStr.toLowerCase()) ||\r\n        obj.description.toLowerCase().includes(searchStr.toLowerCase())\r\n    );\r\n\r\n    return customSort(filteredItems, sortBy).slice(0, CARDS_PER_PAGE);\r\n  }\r\n\r\n  /**\r\n   * Callback trigger to update route params with entered search string\r\n   * @param str - Updated string\r\n   * @returns null\r\n   */\r\n  setSearchStr(str) {\r\n    const { sortBy } = this.props.match.params;\r\n    this.props.history.push(`/${sortBy || DEFAULT_SORT}/${str}`);\r\n  }\r\n\r\n  /**\r\n   * Callback trigger to update route params with selected sort method\r\n   * @param sortConfig - sort selection\r\n   * @returns null\r\n   */\r\n  setSortConfig(sortConfig) {\r\n    const { searchStr } = this.props.match.params;\r\n    this.props.history.push(`/${sortConfig}/${searchStr || DEFAULT_SEARCH_STR}`);\r\n  }\r\n\r\n  render() {\r\n    const { searchStr, sortBy } = this.props.match.params;\r\n    const filteredData = this.getFilteredCards(searchStr, sortBy);\r\n\r\n    return (\r\n      <main role=\"main\" className=\"feed-container\">\r\n        <header className=\"flexi-header\">\r\n          <h1>Feed</h1>\r\n          <Search\r\n            searchStr={searchStr || DEFAULT_SEARCH_STR}\r\n            setSearchStr={str => this.setSearchStr(str)}\r\n          />\r\n          <Sort\r\n            sort={sortBy || DEFAULT_SORT}\r\n            sortOptions={SORT_OPTIONS}\r\n            setSortConfig={config => this.setSortConfig(config)}\r\n          />\r\n        </header>\r\n        <section className=\"cards-container\">\r\n          {filteredData.map((card, i) => (\r\n            <FeedCard key={i} cardDetails={card} />\r\n          ))}\r\n        </section>\r\n        <h2>Cards Table</h2>\r\n        <section>\r\n          <FeedTable data={filteredData} />\r\n        </section>\r\n      </main>\r\n    );\r\n  }\r\n}\r\n\r\nFeed.propTypes = {\r\n  match: PropTypes.object.isRequired,\r\n  history: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default Feed;","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch, Redirect } from \"react-router-dom\";\nimport Feed from './containers/Feed';\nimport './App.scss';\n\nconst App = () => {\n  return (\n    <div className=\"app-container\">\n      <Router>\n        <Switch>\n          <Route exact path=\"/:sortBy(name|name_r|date|date_r)?/:searchStr?\" component={Feed} />\n          <Redirect to=\"/name\" />\n        </Switch>\n      </Router>\n    </div>\n  );\n};\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/styles/global.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}